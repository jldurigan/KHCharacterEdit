@model KHCharacterEdit.Models.Character

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Character</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Armor Slots", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ArmorSlots, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ArmorSlots, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Accessory Slots", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AccessorySlots, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AccessorySlots, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Ability Slots", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AbilitySlots, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AbilitySlots, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Weapon, "Weapon", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("WeaponID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.WeaponID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Weapon Type", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.WeaponType, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.WeaponType, "", new { @class = "text-danger" })
        </div>
    </div>

    @for (int i = 0; i < Model.ArmorSlots; i++) //Cria uma quantidade determinada de DropDownLists contendo Armors de acordo com o número de Slots
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Armors, "Armor Slot " + (i + 1), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Armors", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Armors, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    @for (int i = 0; i < Model.AccessorySlots; i++) //Cria uma quantidade determinada de DropDownLists contendo Accessories de acordo com o número de Slots
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Accessories, "Accessory Slot " + (i + 1), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Accessories", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Accessories, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    @for (int i = 0; i < Model.AbilitySlots; i++) //Cria uma quantidade determinada de DropDownLists contendo Abilities de acordo com o número de Slots
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Abilities, "Ability Slot " + (i + 1), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Abilities", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Abilities, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
